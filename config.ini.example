[create-menu]
# Use this config.ini file or set using command line switches.  Command line switches will override settings in this file
# url : https://my.tandoor.server:8080/recipes/         # The full url of the Tandoor application including protocol, name, port and path
# token : tda_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx             # Tandoor API token.
# log : DEBUG                                           # valid values are INFO (default) and DEBUG
cache: 240                                              # Minutes to cache Tandoor API results; 0 to disable.
# mp_date : 0days                                       # (required) date to create mealplan in YYYY-MM-DD format or XXdays

[recipes]
### By default the menu will selected from all recipes.
### You can limit the set of recipes by defining one or more of the following arguments: recipes, filter or meal_plan

## recipe search parameters, see /docs/api/ for full list of parameters
# recipes : {
#    "query" : "recipe name",
#    "keywords_or" : [3, 4],
#    "keywords_and" : [5, 6],
#    "keywords_or_not" : [7, 8],
#    "keywords_and_not" : [9, 10],
#    "rating" : 4,
#    "cookedon" : "-2023-01-01"  # tandoor requires a date, but to use a relative date for this purpose enter "XXdays" and the date will be formatted XX days ago
#    }

## one or more IDs of CustomFilter that provides list of recipes to choose from.
# filter : []

## one or more IDs of MealType.  The date of the meal plan will be mp_date chosen above
# plan_type : []

[conditions]
choices : 5                                             # number of recipes to choose
### conditions are all list of dicts of the format {condition:xx, count:yy, operator: [>= or <= or ==]}
### exclude (bool) means all recipes excluding listed keys
### except (id), excludes an id from a tree (protein includes all proteins adding except:chicken includes all proteins except chicken)
###
# book : []  # condition = ID or list of IDs
# food : []  # condition = ID or list of IDs
# keyword : [{"condition":[73, 273],"count":"1", "operator":">="},{"condition":47,"count":"2","operator":"==", 'except':[99]},{"condition":1001,"count":"3","operator":"<=", 'exclude':1}]
# rating : [{"condition":3.1,"count":"1", "operator":"=="}]  # Condtion = number between -5 and 5.  Negative value implies lessthan comparison.
# cookedon : []  # condition = date in YYYY-MM-DD format (use 'XXdays' for relative date XX days ago)
# createdon : []  # condition = date in YYYY-MM-DD format (use 'XXdays' for relative date XX days ago)

[mealplan]
# configuration for automatically creating meal plan based on chosen recipes
# create_mp : false                                 # Add mealplans for chosen recipes
# share_with: []                                    # Share mealplan with ID(s)

# mp_type :                                         # (required) id of meal play type; seperate mealplan types are strongly encouraged
# mp_note : Created by: Tandoor Menu Generator
# cleanup_mp : False                                # Delete uncooked mealplans at next execution
# cleanup_date : -7days                             # Starting date to cleanup uncooked mealplans in YYYY-MM-DD format or -XXdays

[menufile]
# create_file: false                                           # Create a menu from an SVG template
# file_format: PNG                                             # options: 'GIF', 'JPG', 'PNG', 'PDF'
# output_dir:                                                  # template dir by default
# file_template: example.svg                                   # name of SVG file located in templates/ directory
# fonts: [{'name': 'example', 'file': 'example.ttf'}]          # non-system fonts required in SVG located in templates directory


replace_text: {
#    date_text: {                                               # (optional) search for text in DATE and replace with menu plan date
#        'date': 'date lorem ipsum',                               #       text must match exactly, including case
#        'ordinal': 'XYZ123',                                      #       when provided will calculate English ordinal suffix (1st, 2nd, etc)
#        'format': 'short                                          #       format of date: long, medium, short, numbers
#    }
#    recipe_text:[{
#        'name' : 'Title1: Lorem ipsum dolor sit amet', # search for the text in NAME and replace with recipe name
#        'ingredients': [                                              # (optional) search for text in INGREDIENTS and replace with recipe ingredients
#            'Line1: Lorem ipsum dolor sit amet, consectetur adip',    # if concatanating ingredients exceeds length of first line of ingredients
#            'Line2: Lorem ipsum dolor sit amet, consectetur adip',    # ingredients will be truncated and continue on the next line
#            'Line3: Lorem ipsum dolor sit amet, consectetur adip',
#            'Line4: Lorem ipsum dolor sit amet, consectetur adip'
#            ]
#        }]
#        }
# seperator: ' - '                                               # seperator to use when concatanating ingredients
